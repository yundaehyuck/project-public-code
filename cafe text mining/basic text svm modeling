#지도학습
#svm modeling 

#data preprocessing

#텍스트 데이터의 정답인 범주를 알아내기

#말머리가 없는 데이터는 먼저 제거합니다
for i in title_copy: 
    if i[0]!='[':
        title_copy.remove(i)

#텍스트 데이터의 말머리를 이용하여 데이터의 정답인 범주를 알아냅니다

title_copy_tag=[]
#enumerate(title_copy)하면 오류날수 있다 원본을 이용하여 반복문을 iteration한다
for i,v in enumerate(title): #텍스트 데이터의 말머리를 이용하여 정답인 범주를 알아내 새로운 리스트를 작성
    if v[3] != ']':
        title_copy_tag.append(v[1:5])
        title_copy[i]=v[6:]
    if v[3] == ']':
        title_copy_tag.append(v[1:3])
        title_copy[i]=v[4:]
        
Counter(title_copy_tag) #정답인 범주 빈도수 확인

#범주의 one hot encoding 작업
import copy
title_copy_tag_dummy=copy.deepcopy(title_copy_tag)
#enumerate(title_copy_tag_dummy)하면 오류날수 있어서 원본을 이용하여 반복문을 iteration
for i,v in enumerate(title_copy_tag):
    if v == '축구':
        title_copy_tag_dummy[i] = 0
    if v == 'E스포츠':
        title_copy_tag_dummy[i] = 1
    if v == '농구':
        title_copy_tag_dummy[i] = 2
    if v == '야구':
        title_copy_tag_dummy[i] = 3
    if v == '기타':
        title_copy_tag_dummy[i] = 4
        
        
#기술통계 분석

#데이터프레임 만드는 라이브러리
import pandas as pd

#시각화 라이브러리
import matplotlib.pyplot as plt
import matplotlib
from matplotlib import font_manager, rc
import platform

#matplotlib를 사용하면 한글이 깨질수 있기 때문에 이를 방지하기 위함

if platform.system() == 'Windows':
# 윈도우인 경우
    font_name = font_manager.FontProperties(fname="c:/Windows/Fonts/malgun.ttf").get_name()
    rc('font', family=font_name)
else:    
# Mac 인 경우
    rc('font', family='AppleGothic')
    
matplotlib.rcParams['axes.unicode_minus'] = False   

#정답인 범주 빈도수이용하여 데이터 프레임 생성
Counter(title_copy_tag)
count_data={'종목명':['축구','E스포츠','농구','야구','기타'],'빈도':[9564,4088,2677,43,328]}
count_df=pd.DataFrame(count_data)
count_df.index=['축구','E스포츠','농구','야구','기타'] #index 0,1,2,3,4를 보기 좋게 변환
del count_df['종목명']

#범주 빈도수 시각화
count_df['빈도'].sort_values().plot(kind='barh')


#svm 모델링 적합

#데이터프레임 생성
data={'제목':title_copy,'종목':title_copy_tag_dummy}
df=pd.DataFrame(data)


#필요한 라이브러리를 불러옵니다.
import numpy as np
from sklearn.model_selection import train_test_split #훈련데이터와 시험데이터를 나누기위한 라이브러리
from konlpy.tag import Twitter #형태소분석 라이브러리
from sklearn.feature_extraction.text import CountVectorizer #단어 벡터화 라이브러리
#svm모델링을 위한 라이브러리
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.linear_model import SGDClassifier
from sklearn.pipeline import Pipeline

#훈련데이터와 시험데이터를 나눕니다
train, test = train_test_split(df, test_size=0.33, random_state=42) #2/3은 훈련데이터 1/3은 시험데이터 #random_state는 random seed를 의미

#텍스트를 받아 명사를 얻는 기본함수를 정의
def get_noun(text):
    tokenizer = Twitter()
    nouns = tokenizer.nouns(text)
    return [n for n in nouns]
    
    
cv = CountVectorizer(tokenizer=get_noun) #명사를 얻는 함수를 이용하여 단어 벡터화 객체 생성

tdm = cv.fit_transform(train["제목"]) #훈련 데이터의 제목으로부터 단어를 추출하여 벡터화시킴

cv.vocabulary_ #훈련 데이터 제목을 구성하는 단어 빈도수를 알아본다

#svm 모델링 생성
text_clf_svm = Pipeline([('vect', CountVectorizer(tokenizer=get_noun)),
                         ('tfidf', TfidfTransformer()),
                         ('clf-svm', SGDClassifier(loss='hinge', penalty='l2', alpha=1e-3, random_state=42))])

#svm 모델링 훈련
text_clf_svm = text_clf_svm.fit(train["제목"], train["종목"])

#시험데이터를 이용하여 모델 평가
predicted_svm = text_clf_svm.predict(test["제목"])
np.mean(predicted_svm == test["종목"]) #예측 정확성 계산

#적합된 svm 모델로 새로운 데이터에 대한 예측 실시
text_clf_svm.predict(["오늘자 수원 삼성의 격세지감 스쿼드(아챔 스쿼드)"])
text_clf_svm.predict(["꼬마전 리오넬 메시 하이라이트"])
text_clf_svm.predict(['롤 아카데미리그 보는데 재미있네요ㅎㅎㅎ'])
