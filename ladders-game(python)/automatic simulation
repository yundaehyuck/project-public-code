#네이버 사다리타기 자동 시뮬레이션 (6명용)

#필요한 라이브러리를 불러옵니다

from selenium import webdriver #웹드라이버 제어용 라이브러리
import pyautogui #키보드와 마우스를 제어하는 라이브러리
from PIL import Image #이미지를 열기 위한 라이브러리
import pytesseract #이미지를 텍스트로 만들기 위한 라이브러리
import time #시간 지연을 위한 라이브러리

#a,b,c,d,e,f가 당첨된 위치를 나타내는 리스트
#빈 리스트를 생성합니다

a_list=[]
b_list=[]
c_list=[]
d_list=[]
e_list=[]
f_list=[]

#반복 횟수를 나타내는 변수를 생성합니다
n=1

#제어를 위한 빈 크롬 드라이버를 불러옵니다

path='chromedriver.exe'
driver=webdriver.Chrome(path)

#미리 준비한 네이버 사다리타기 url로 접근합니다

url="https://search.naver.com/search.naver?where=nexearch&sm=tab_jum&query=%EC%82%AC%EB%8B%A4%EB%A6%AC%ED%83%80%EA%B8%B0"
driver.get(url)

#마우스 스크롤을 적절한 양만큼 내립니다.
pyautogui.scroll(-95)

#로딩되는 시간을 기다리기 위해 적절한 시간지연을 시킵니다.
time.sleep(5)

#필요한 위치 값들을 찾아내기 위한 사다리 게임을 실행하는 프로그램을 만들어냅니다.

# 미리 준비한 사다리타기 start 버튼 이미지를 이용하여 위치를 찾아냅니다.
startlocate=pyautogui.locateOnScreen('start.png') #반드시 png를 사용해야함

#start버튼의 중앙의 위치를 찾고 더블클릭하여 게임을 시작합니다.
startcenter=pyautogui.center(startlocate)
pyautogui.doubleClick(startcenter)

#자동으로 사다리를 완성합니다
#사용하는 컴퓨터의 화면크기에 따라 다르므로 적절하게 정해야합니다
#나중에도 사용할 것이므로 함수로 만들어냅니다.

def automatic_ladders(a):
    pyautogui.moveTo(a)
    pyautogui.move(0,-198)
    pyautogui.move(-198,0)
    pyautogui.click()
    pyautogui.press('a')
    pyautogui.move(72,0)
    pyautogui.click()
    pyautogui.press('b')
    pyautogui.move(72,0)
    pyautogui.click()
    pyautogui.press('c')
    pyautogui.move(72,0)
    pyautogui.click()
    pyautogui.press('d')
    pyautogui.move(72,0)
    pyautogui.click()
    pyautogui.press('e')
    pyautogui.move(72,0)
    pyautogui.click()
    pyautogui.press('f')
    pyautogui.move(0,170)
    pyautogui.click()
    pyautogui.press('6')
    pyautogui.move(-70,0)
    pyautogui.click()
    pyautogui.press('5')
    pyautogui.move(-70,0)
    pyautogui.click()
    pyautogui.press('4')
    pyautogui.move(-70,0)
    pyautogui.click()
    pyautogui.press('3')
    pyautogui.move(-70,0)
    pyautogui.click()
    pyautogui.press('2')
    pyautogui.move(-70,0)
    pyautogui.click()
    pyautogui.press('1')
    
automatic_ladders(startcenter)
    
#사다리게임을 시작합니다.
#미리 준비한 시작버튼 이미지를 이용하여 시작버튼 위치를 찾습니다.
gamestartlocate=pyautogui.locateOnScreen('gamestart.png')
gamestartcenter=pyautogui.center(gamestartlocate)

#시작버튼을 클릭합니다.
pyautogui.click(gamestartcenter)    

#미리 준비한 결과버튼 이미지를 이용하여 결과위치를 찾습니다.
resultlocate=pyautogui.locateOnScreen('result.png')
resultcenter=pyautogui.center(resultlocate)

#결과버튼을 클릭합니다.
pyautogui.click(resultcenter)

###############################################################################################

#결과창을 이미지화 시키기 위해 위치를 찾습니다.
#결과창의 숫자부분만 수동으로 캡쳐한 후 저장하여 위치값을 찾습니다. 
examplelocate=pyautogui.locateOnScreen('resultexample.png')
print(examplelocate)

#미리 준비한 다시하기 버튼 이미지를 이용하여 다시하기 버튼의 위치를 찾습니다
restartlocate=pyautogui.locateOnScreen('restart.png')
restartcenter=pyautogui.center(restartlocate)
print(restartcenter)

#####################################################################################################

#게임을 다시 시작합니다.
pyautogui.doubleClick(restartcenter)

#로딩되는 시간을 기다리기 위해 충분한 시간지연을 시킵니다.
time.sleep(2)

#이제 사다리타기 게임을 반복합니다.

while n<=1000:
    pyautogui.click(startcenter)
    
    automatic_ladders(startcenter)
    
    pyautogui.click(gamestartcenter)
    
    pyautogui.click(resultcenter)
    
    #결과창을 이미지화 시킵니다
    resultimage=pyautogui.screenshot('resultimage.png',region=examplelocate)
    
    #결과창 이미지를 불러옵니다.
    result=Image.open('resultimage.png')
    
    #결과창 이미지를 텍스트로 만들어냅니다
    resulttext=pytesseract.image_to_string(result,config='--psm 6') # --psm 6을 사용하면 tesseract가 숫자를 인식합니다
    
    #리스트에 차례대로 넣습니다.
    a_list.append(int(resulttext[0]))
    b_list.append(int(resulttext[2]))
    c_list.append(int(resulttext[4]))
    d_list.append(int(resulttext[6]))
    e_list.append(int(resulttext[8]))
    f_list.append(int(resulttext[10]))
    
    #반복횟수를 증가시킵니다.
    n=n+1
    
    pyautogui.click(restartcenter)
    
    time.sleep(2)
